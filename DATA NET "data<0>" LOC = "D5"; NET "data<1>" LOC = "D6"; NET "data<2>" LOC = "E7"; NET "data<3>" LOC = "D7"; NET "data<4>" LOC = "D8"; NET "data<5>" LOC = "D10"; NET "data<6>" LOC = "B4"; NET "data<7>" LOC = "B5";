`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    13:57:36 11/06/2013 
// Design Name: 
// Module Name:    Lab9Module 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
// trick method to convert 8 bit binary to 3 BCD digits for display
module Lab9(data, clk, AN, SSEG);
	input [7:0] data;
	input clk;
	output reg [3:0] AN;
	output reg [0:6] SSEG;
	reg [7:0] tempF;
	reg [1:0] segSel;
	reg [17:0] count;
	reg [7:0] Input;
	wire [3:0] NEW_ONES;
	wire [3:0] NEW_TENS;
	wire [1:0] NEW_HUNDREDS;
	//load data
	always @(posedge clk)
		begin
			Input <= data;
		end

	//convert to f degrees
	always @(Input) // or Input
		begin
			case (Input)
				15: tempF = 59; //8'd059
				16: tempF = 60;
				17: tempF = 62;
				18: tempF = 64;
				19: tempF = 66;
				20: tempF = 68;
				21: tempF = 70;
				22: tempF = 71;
				23: tempF = 73;
				24: tempF = 75;
				25: tempF = 77;
				26: tempF = 79;
				27: tempF = 80;
				28: tempF = 82;
				29: tempF = 84;
				30: tempF = 86;
				default: tempF = 0;
			endcase
		end
		
binary_to_BCD FINAL(tempF,NEW_ONES,NEW_TENS,NEW_HUNDREDS);
//segment multiplexer
	always @ (posedge clk)
		begin
			count <= count + 1;
			if (count < 65535)
				segSel <= 2'b00;
			else if (count < 131071)
				segSel <= 2'b01;
			else if (count < 196606)
				segSel <= 2'b10;
			else
				segSel <= 2'b11;
		end
//count overflows and then gets reset to 0 via the FPGA
//triple 7 segment display driver
	always @(posedge clk)
		begin
			if (segSel == 0)
				begin
					AN = 4'b1110;
					case (NEW_ONES) //ONES
						0: SSEG = 7'b0000001;
						1: SSEG = 7'b1001111;
						2: SSEG = 7'b0010010;
						3: SSEG = 7'b0000110;
						4: SSEG = 7'b1001100;
						5: SSEG = 7'b0100100;
						6: SSEG = 7'b0100000;
						7: SSEG = 7'b0001111;
						8: SSEG = 7'b0000000;
						9: SSEG = 7'b0000100;
						default: SSEG = 7'b1111111;
					endcase
				end
			else if (segSel == 1)
				begin
					AN = 4'b1101;
					case (NEW_TENS) //TENS
						0: SSEG = 7'b0000001;
						1: SSEG = 7'b1001111;
						2: SSEG = 7'b0010010;
						3: SSEG = 7'b0000110;
						4: SSEG = 7'b1001100;
						5: SSEG = 7'b0100100;
						6: SSEG = 7'b0100000;
						7: SSEG = 7'b0001111;
						8: SSEG = 7'b0000000;
						9: SSEG = 7'b0000100;
						default: SSEG = 7'b1111111;
					endcase
				end
			else if (segSel == 2)
				begin
					AN = 4'b1011;
					case (NEW_HUNDREDS) //HUNDREDS
						0: SSEG = 7'b0000001;
						1: SSEG = 7'b1001111;
						2: SSEG = 7'b0010010;
						3: SSEG = 7'b0000110;
						4: SSEG = 7'b1001100;
						5: SSEG = 7'b0100100;
						6: SSEG = 7'b0100000;
						7: SSEG = 7'b0001111;
						8: SSEG = 7'b0000000;
						9: SSEG = 7'b0000100;
						default: SSEG = 7'b1111111;
					endcase
				end
			end
endmodule

// case statment through range also works.
module binary_to_BCD(A,ONES,TENS,HUNDREDS);
	input [7:0] A;
	output [3:0] ONES, TENS;
	output [1:0] HUNDREDS;
	wire [3:0] c1,c2,c3,c4,c5,c6,c7;
	wire [3:0] d1,d2,d3,d4,d5,d6,d7;
	
	assign d1 = {1'b0,A[7:5]};
	assign d2 = {c1[2:0],A[4]};
	assign d3 = {c2[2:0],A[3]};
	assign d4 = {c3[2:0],A[2]};
	assign d5 = {c4[2:0],A[1]};
	assign d6 = {1'b0,c1[3],c2[3],c3[3]};
	assign d7 = {c6[2:0],c4[3]};
	add3 m1(d1,c1);
	add3 m2(d2,c2);
	add3 m3(d3,c3);
	add3 m4(d4,c4);
	add3 m5(d5,c5);
	add3 m6(d6,c6);
	add3 m7(d7,c7);
	assign ONES = {c5[2:0],A[0]};
	assign TENS = {c7[2:0],c5[3]};
	assign HUNDREDS = {c6[3],c7[3]};

endmodule

// used above for trick method.
module add3(in,out);
	input [3:0] in;
	output [3:0] out;
	reg [3:0] out;
	always @ (in)
		case (in)
			4'b0000: out <= 4'b0000;
			4'b0001: out <= 4'b0001;
			4'b0010: out <= 4'b0010;
			4'b0011: out <= 4'b0011;
			4'b0100: out <= 4'b0100;
			4'b0101: out <= 4'b1000;
			4'b0110: out <= 4'b1001;
			4'b0111: out <= 4'b1010;
			4'b1000: out <= 4'b1011;
			4'b1001: out <= 4'b1100;
			default: out <= 4'b0000;
		endcase
endmodule
